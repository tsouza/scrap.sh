buildscript {
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.+"
    }
}

repositories {
    maven { url "http://www.gridgainsystems.com/nexus/content/repositories/external" }
}

apply plugin: "spring-boot"
apply plugin: "jp.classmethod.aws.beanstalk"

dependencies {
   compile project(":scrapper")

    compile "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}",
            "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"

    compile "com.google.guava:guava:$guavaVersion"

    compile "org.apache.ignite:ignite-core:${igniteVersion}",
            "org.apache.ignite:ignite-schedule:${igniteVersion}",
            "org.apache.ignite:ignite-slf4j:${igniteVersion}"

    compile("org.apache.ignite:ignite-aws:${igniteVersion}") {
        exclude group: "com.amazonaws"
    }

    compile "com.esotericsoftware:kryo:${kryoVersion}"

    compile "com.amazonaws:aws-java-sdk-dynamodb:${awsVersion}"
}

ext.artifactId = 'scraplet'
ext.timestamp = new Date().format("yyyyMMdd'_'HHmmss", TimeZone.default)
ext.versionDesc = "${version}-${timestamp}"
ext.awsEnviroment = '64bit Amazon Linux 2015.09 v2.0.4 running Docker 1.7.1'

aws.region = "us-west-2"

beanstalk {
    appName "${artifactId}"
    appDesc "scraplet"

    version {
        label = "${artifactId}-${versionDesc}"
        description = "${artifactId} v${version}"
        bucket = "elasticbeanstalk-${aws.region}-${aws.accountId}"
        key = "eb-apps/${artifactId}/${artifactId}-${versionDesc}.zip"
    }

    configurationTemplates {
        production {
            optionSettings = file("src/main/config/production.json")
            solutionStackName = "${awsEnviroment}"
        }
        development {
            optionSettings = file("src/main/config/development.json")
            solutionStackName = "${awsEnviroment}"
        }
    }

    environment {
        envName = "${artifactId}-blue"
        envDesc = "${artifactId} blue environemnt"
        templateName = "development"
        versionLabel = "${artifactId}-${versionDesc}"
    }

    environment {
        envName = "${artifactId}"
        envDesc = "${artifactId} green environemnt"
        templateName = "production"
        versionLabel = "${artifactId}-${versionDesc}"
    }
}

task createDockerfile(type: Copy, dependsOn: jar) {
    from "src/main/bundle/Dockerfile"
    into "build/bundle"
    expand(jarFilename: jar.archiveName, artifactId: project.artifactId)
}

task createBundleResources(type: Copy) {
    from "src/main/bundle"
    into "build/bundle"
    exclude "src/main/bundle/Dockerfile"
}

task createBundle(type: Zip, dependsOn: [createDockerfile, createBundleResources, bootRepackage]) {
    archiveName = jar.archiveName.substring(0, jar.archiveName.length() - 4) + ".zip"
    from "build/bundle"
    from jar.archivePath
}

task uploadBundle(type: jp.classmethod.aws.gradle.s3.AmazonS3FileUploadTask, dependsOn: createBundle) {
    group "AWS"
    description "Upload ${artifactId} application bundle file to S3."

    bucketName "elasticbeanstalk-${aws.region}-${aws.accountId}"
    key "eb-apps/${artifactId}/${artifactId}-${versionDesc}.zip"
    file project.createBundle.archivePath
    overwrite project.version.endsWith("-SNAPSHOT")
}

awsEbCreateApplicationVersion.dependsOn uploadBundle

/*
distDocker {
    applicationName "scraplet"
    baseImage "java:8"
    tagVersion "latest"
    setEnvironment "JAVA_OPTS",
            "-Dspring.profiles.active=production " +
            "-Xms512M -Xmx1G " +
            "-server -XX:+AggressiveOpts"
    push true
    registry "quay.io/scrapsh"
}*/